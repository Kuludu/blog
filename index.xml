<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kuludu的博客</title><link>https://blog.kuludu.net/</link><description>Recent content on Kuludu的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Kuludu</copyright><lastBuildDate>Tue, 07 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.kuludu.net/index.xml" rel="self" type="application/rss+xml"/><item><title>macOS版MS Office实现自动正规形式图标编号</title><link>https://blog.kuludu.net/article/macos-ms-office-auto-number/</link><pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate><guid>https://blog.kuludu.net/article/macos-ms-office-auto-number/</guid><description>&lt;p>最近在进行学位论文的撰写工作的过程中遇到了这样一系列的问题：&lt;/p>
&lt;p>按照学校论文格式要求，章节标题应当使用中文汉字，而小节标题应当使用阿拉伯数字。即如以下形式：&lt;/p>
&lt;blockquote>
&lt;p>第一章 绪论&lt;br>
1.1 研究背景及意义&lt;br>
1.2 国内外研究进展&lt;/p>&lt;/blockquote>
&lt;p>但是这样的编号要求会导致章节与小节编码符号不统一，最后显示为&lt;code>一.1研究背景及意义&lt;/code>。不过解决这个问题的方法很简单，只需要在多级列表里选择&lt;strong>正规形式编号&lt;/strong>即可。&lt;/p>
&lt;p>但是这样操作还会引起另一个问题，那就是图表标题的按章自动编号也变成了&lt;code>图 一.1&lt;/code>或&lt;code>表 一.1&lt;/code>。&lt;/p>
&lt;p>参考资料[1]的做法，我们可以将章节编号的域代码修改为&lt;code>{ QUOTE &amp;quot;一九一一年一月{ STYLEREF 1 \s }日&amp;quot; \@&amp;quot;D&amp;quot; }&lt;/code>实现阿拉伯数字的自动编号。但是，这一点在macOS下的MS Office里不能直接实现，原因是域代码中的&lt;code>{}&lt;/code>符号是不能直接打出来的，必须使用快捷键生成。这就很尴尬了，因为macOS的快捷键和Windows的压根对不上。&lt;/p>
&lt;p>当然这里是存在快捷键的，具体可以参考资料[2]。不过本文想提供一种不用快捷键的实现方法，包括Windows其实也可以这么做。&lt;/p>
&lt;h2 id="解决步骤">解决步骤
&lt;/h2>&lt;ol>
&lt;li>和[1]中标准步骤一样，先对图表进行插入题注的操作，然后切换章节部分的域代码。&lt;/li>
&lt;li>在&lt;strong>插入&amp;gt;域&lt;/strong>选项里随便添加一个域代码，比如&lt;code>AUTONUM&lt;/code>（位置参考图1，Windows版在文档部件里面）。&lt;/li>
&lt;li>对插入的域代码再次进行切换域代码的操作，这样就生成了一个&lt;code>{}&lt;/code>。&lt;/li>
&lt;li>然后按照 [1]中的步骤对应修改域代码即可。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.kuludu.net/article/macos-ms-office-auto-number/1.png"
width="306"
height="158"
srcset="https://blog.kuludu.net/article/macos-ms-office-auto-number/1_hu_8a91dfe79d8d894c.png 480w, https://blog.kuludu.net/article/macos-ms-office-auto-number/1_hu_a8ee05be19dbe936.png 1024w"
loading="lazy"
alt="图1"
class="gallery-image"
data-flex-grow="193"
data-flex-basis="464px"
>&lt;/p>
&lt;p>当然我们不可能每次插入图表都这样操作一次，同样我们不使用快捷键也可以添加文档基块。&lt;/p>
&lt;ol>
&lt;li>光标选择图或表的编号。&lt;/li>
&lt;li>在&lt;strong>自动图文集&amp;gt;新建&lt;/strong>添加（位置参考图2，Windows版同样在文档部件里）。&lt;/li>
&lt;li>随便取一个名字，比如&lt;code>图&lt;/code>，然后在想插入的位置输入对应图文集的名字就可以快捷插入编号了。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.kuludu.net/article/macos-ms-office-auto-number/2.png"
width="652"
height="162"
srcset="https://blog.kuludu.net/article/macos-ms-office-auto-number/2_hu_f4ac51fbef2ebd9e.png 480w, https://blog.kuludu.net/article/macos-ms-office-auto-number/2_hu_d5f416d35e956d04.png 1024w"
loading="lazy"
alt="图2"
class="gallery-image"
data-flex-grow="402"
data-flex-basis="965px"
>&lt;/p>
&lt;p>macOS的MS Office真的是个半成品&amp;hellip;&lt;/p>
&lt;hr>
&lt;p>Reference&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://yxchangingself.xyz/posts/2028856356/" target="_blank" rel="noopener"
>https://yxchangingself.xyz/posts/2028856356/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://support.microsoft.com/zh-cn/office/word-%E4%B8%AD%E7%9A%84%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F-95ef89dd-7142-4b50-afb2-f762f663ceb2#PickTab=macOS" target="_blank" rel="noopener"
>https://support.microsoft.com/zh-cn/office/word-%E4%B8%AD%E7%9A%84%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F-95ef89dd-7142-4b50-afb2-f762f663ceb2#PickTab=macOS&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>有锁栈与无锁栈，实现与性能对比</title><link>https://blog.kuludu.net/article/lock-required-stack-vs-lock-free-stack/</link><pubDate>Fri, 25 Oct 2024 09:35:00 +0800</pubDate><guid>https://blog.kuludu.net/article/lock-required-stack-vs-lock-free-stack/</guid><description>&lt;p>多线程同步是现代程序设计中一个重要问题，想要深入理解这一问题，就不得不深入到处理器与操作系统的具体实现中。但是我水平有限┑(￣Д ￣)┍，本文不过于详细地去探讨这一问题，而是以有锁栈与无锁栈作为切入点，主要对代码实现与实验性能上对两者进行一个比较。&lt;/p>
&lt;h2 id="有锁栈与无锁栈">有锁栈与无锁栈
&lt;/h2>&lt;p>有锁栈的实现方式其实比较简单，在线程进入临界区的时候加锁即可，在完成对栈的操作解除对锁的占有。但是加锁解锁的过程对资源的消耗比较大，当线程没有Acquire到锁的时候会发生状态的切换，这在需要高性能计算的场景下或许并不合适。&lt;/p>
&lt;p>Compare And Swap(CAS)是一种常见的原子操作，是实现无锁同步的一个方式，其主要思想就是Compare和Swap两个过程。Compare的目的主要是探测内存中的值是否为期待值，如果是则Swap为设定的值。这主要依赖于处理器的实现，比如x86处理器的&lt;code>CMPXCHG&lt;/code>与ARM处理器的&lt;code>LDREX/STREX&lt;/code>。&lt;/p>
&lt;h2 id="实现与实验">实现与实验
&lt;/h2>&lt;h3 id="c实现">C++实现
&lt;/h3>&lt;p>本文主要对比C++标准库实现的栈，会用到一些比较新的C++标准，实验环境为：&lt;/p>
&lt;ul>
&lt;li>腾讯云Cloud Studio 1C2G（致谢！）&lt;/li>
&lt;li>gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.2)&lt;/li>
&lt;li>g++ experiment.cpp -o experiment -pthread&lt;/li>
&lt;/ul>
&lt;p>为了减少代码冗余，两个栈实现的内部数据结构均为以下代码段。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Node&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以下为有锁栈的实现代码的核心部分。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;*&lt;/span> &lt;span class="n">new_node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_node&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">head&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_node&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">T&lt;/span> &lt;span class="nf">top&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;*&lt;/span> &lt;span class="n">top_node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">top_node&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">top_node&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">runtime_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Stack is empty.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">pop&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;*&lt;/span> &lt;span class="n">top_node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">top_node&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;*&lt;/span> &lt;span class="n">next_node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">top_node&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">head&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next_node&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">top_node&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">runtime_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Stack is empty.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">is_empty&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">noexcept&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mtx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">head&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有锁栈的实现主要依赖互斥锁（mutex &amp;amp; unique_lock）实现，线程在进行每项操作时需要先Acquire锁的所有权，在执行完操作后需要Release锁的所有权。在这里我们不对修改操作的合法性进行检查，而是选择直接对不合法的越界操作抛出异常。有锁栈的实现简单，符合一般的多线程编程逻辑比较直观。在这里使用标准库自带的RAII锁，编程实现非常简单。&lt;/p>
&lt;p>以下为无锁栈实现的核心部分。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;*&amp;gt;&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;*&lt;/span> &lt;span class="n">new_node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_node&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_relaxed&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">compare_exchange_weak&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new_node&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new_node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_release&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_relaxed&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">T&lt;/span> &lt;span class="nf">top&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;*&lt;/span> &lt;span class="n">top_node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_acquire&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">top_node&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">top_node&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">runtime_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Stack is empty.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">pop&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;*&lt;/span> &lt;span class="n">top_node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_relaxed&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">top_node&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;*&lt;/span> &lt;span class="n">next_node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">top_node&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">compare_exchange_weak&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">top_node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_release&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_relaxed&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">delete&lt;/span> &lt;span class="n">top_node&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">runtime_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Stack is empty.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">is_empty&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">noexcept&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_acquire&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对比有锁栈，无锁栈在实现上困难了不少，这主要牵涉到对CAS的理解上。这一部分的理论部分在前文与参考资料中有比较详细的描述，这里再简单对C++代码实现方面做一个解释：&lt;/p>
&lt;ul>
&lt;li>head作为栈顶元素的指针，在这里使用的是原子变量类型，这主要是为了能够在一个CPU Instruction中完成对变量的操作，从而避免中间状态的产生，也就保证了操作的原子性。原子操作存在内存序的概念，在这里用到了三种内存序，分别解释如下
&lt;ul>
&lt;li>memory_order_relaxed: 松散内存顺序。这个模式保证了读操作不会被重排，但对于写操作没有任何保证。&lt;/li>
&lt;li>memory_order_release：释放内存顺序。保障了读写顺序，通常不适用于load()。&lt;/li>
&lt;li>memory_order_acquire：获取内存顺序。保障了读写顺序。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>atomic.load()&lt;/code>的作用是安全地读取一个原子变量，其中参数为内存序（Memory Order）。在Push和Pop操作中选择的load的内存序为memory_order_relaxed，这是因为这里考虑CAS方式乱序地插入与删除元素，即元素本身的顺序并不重要；而在IsEmpty操作中的内存序为memory_order_acquire，这主要是考虑在当前时间点执行IsEmpty的结果的正确性。&lt;/li>
&lt;li>&lt;code>atomic.compare_exchange_weak()&lt;/code>用于执行原子比较和交换操作，也就是CAS机制的主要实现。其中一个参数为Expected，是Compare过程比较的值；第二个变量为Desire，是Swap过程想要交换为的值。其工作过程为，比较atomic变量与Expected是否相等，如果相等则交换为Desire，否则退化为一个load的过程，将最新的atomic的值加载进Desire。后两个参数则为比较success或failure后的内存序。值得一提的是&lt;code>atomic.compare_exchange_strong()&lt;/code>也值得了解，其主要适用于不需要循环重试的场景，关注可靠性的场景。&lt;/li>
&lt;/ul>
&lt;p>&lt;em>这一部分的内容有一些难理解，如果读到这里你有所困惑，建议去查找更多关于CAS机制及C++内存序的相关资料，本文不再详细展开&lt;del>（没错我也讲不明白😔）&lt;/del>。&lt;/em>&lt;/p>
&lt;p>为了进行公平对比，在这里定义实验任务为：在每个线程中执行&lt;code>1,000,000&lt;/code>次入栈操作，如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">ok&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">enqueue&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1000000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这里我使用线程池创建了两个线程，从任务创建开始计时，以两个线程的入栈任务结束截止计时，核心代码如下所示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Assign tasks to thread pool.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ok_1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">ok_2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">stop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">high_resolution_clock&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">duration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">duration_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">microseconds&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stop&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">duration&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>本文所提到的线程池、有锁栈和无锁栈的完整代码实现均可在本人的开源项目&lt;a class="link" href="https://github.com/Kuludu/MyDSA/" target="_blank" rel="noopener"
>MyDSA&lt;/a>中找到（如果对你有用，也麻烦点一个小星星呀！）。&lt;/p>
&lt;h3 id="实验结果">实验结果
&lt;/h3>&lt;p>实验结果如下表（单位为microsecond）。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法&lt;/th>
&lt;th>有锁栈&lt;/th>
&lt;th>无锁栈&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>#1&lt;/td>
&lt;td>1,003,863&lt;/td>
&lt;td>399,217&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>#2&lt;/td>
&lt;td>884,579&lt;/td>
&lt;td>186,314&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>#3&lt;/td>
&lt;td>1,013,956&lt;/td>
&lt;td>427,235&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Avg&lt;/td>
&lt;td>967,466&lt;/td>
&lt;td>337,588&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>从实验结果的平均值来看，有锁栈相较于无锁栈快了2.86倍。当然这只是从入栈效率上来进行比较的，如果加上随机出栈与取值操作可能会有差异。&lt;/p>
&lt;hr>
&lt;h2 id="reference">Reference
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://tech.meituan.com/2024/07/19/multi-threading-and-multi-thread-synchronization.html" target="_blank" rel="noopener"
>基本功 | 一文讲清多线程和多线程同步&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/davidhopper/article/details/131430830" target="_blank" rel="noopener"
>C++无锁编程——无锁栈(lock-free stack)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.cnblogs.com/ljmiao/p/18145946" target="_blank" rel="noopener"
>C++六种内存序详解&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>友情链接</title><link>https://blog.kuludu.net/page/link/</link><pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.kuludu.net/page/link/</guid><description>&lt;ul>
&lt;li>&lt;a class="link" href="https://iovxw.net/" target="_blank" rel="noopener"
>iovxw&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.bangbang93.com/" target="_blank" rel="noopener"
>bangbang93&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://qaq.gd/" target="_blank" rel="noopener"
>brainbush&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.zhuhening.cn" target="_blank" rel="noopener"
>fz&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://coder-liuu.github.io" target="_blank" rel="noopener"
>刘小洋&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>注：一些失效的博客取消了链接，如果有恢复麻烦联系我。&lt;/p></description></item><item><title>博客日志</title><link>https://blog.kuludu.net/page/log/</link><pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.kuludu.net/page/log/</guid><description>&lt;p>博客建立
-2014.8.19&lt;/p>
&lt;p>迁移到日本机房
-2015.3.21&lt;/p>
&lt;p>老主页删除，由博客替代主页功能
-2015.4.18&lt;/p>
&lt;p>全站迁移到AWS美国机房
-2015.8.16&lt;/p>
&lt;p>更新主题，优化加载
-2015.8.17&lt;/p>
&lt;p>启用七牛云加速，大大提高了加载速度
-2015.8.20&lt;/p>
&lt;p>服务器故障
-2015.9.2&lt;/p>
&lt;p>已经恢复，全站迁移到日本AWS机房
-2015.9.4&lt;/p>
&lt;p>删除了Jetpack插件，提高了访问速度。
-2015.9.20&lt;/p>
&lt;p>升级至PHP7
-2016.6.11&lt;/p>
&lt;p>服务器迁移到新加坡DigitalOcean机房
-2016.6.24&lt;/p>
&lt;p>网站线路出现问题，恢复时间不明
-2016.7.5&lt;/p>
&lt;p>网站线路恢复
-2016.7.6&lt;/p>
&lt;p>迁移到广州腾讯云机房，同时进行网站备案，临时闭站
-2016.7.13&lt;/p>
&lt;p>网站备案完成，更换了模板，优化了访问体验
-2016.7.19&lt;/p>
&lt;p>更换SSL证书为Let&amp;rsquo;s encrypt
-2016.9.4&lt;/p>
&lt;p>移除了七牛云静态资源加速
-2016.11.22&lt;/p>
&lt;p>更新博客域名到blog.kuludu.net，删除了多说评论
-2017.2.7&lt;/p>
&lt;p>更新了头像
-2017.2.12&lt;/p>
&lt;p>启用七牛云空间进行备份
-2017.4.3&lt;/p>
&lt;p>切换DNS为DNSPod
-2017.10.1&lt;/p>
&lt;p>启用了腾讯云CDN
-2017.10.3&lt;/p>
&lt;p>启用HTTP/2.0
-2017.10.12&lt;/p>
&lt;p>更换主题为Kratos-pjax
-2018.6.13&lt;/p>
&lt;p>升级了服务器主机
-2018.8.23&lt;/p>
&lt;p>更换博客程序为Typecho,更换主题为handsome
-2018.11.1&lt;/p>
&lt;p>启用Google Analytics分析，添加阿里云广告
-2018.11.30&lt;/p>
&lt;p>为节省服务器开销，迁移了服务器，同时进行了系统优化
-2019.7.26&lt;/p>
&lt;p>启用OCSP装订
-2020.5.20&lt;/p>
&lt;p>迁移源站，启用HSTS
-2020.11.16&lt;/p>
&lt;p>开启IPv6支持
-2021.3.20&lt;/p>
&lt;p>升级博客程序到Typecho 1.2正式版
-2022.4.2&lt;/p>
&lt;p>源站迁移
-2023.12.20&lt;/p>
&lt;p>更换为hugo生成的静态博客
-2024.6.17&lt;/p></description></item><item><title>关于我</title><link>https://blog.kuludu.net/page/about/</link><pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.kuludu.net/page/about/</guid><description>&lt;h2 id="个人简介">个人简介
&lt;/h2>&lt;p>我是范雨祥(Yuxiang Fan)，一个混子，惯用Kuludu这一ID上网冲浪，目前在某三流高校攻读软件工程硕士学位（没想到我能混到研究生读），一个非常佛系的ENTP🙏。&lt;/p>
&lt;p>我喜欢：&lt;/p>
&lt;ul>
&lt;li>摄影（一顿乱拍，全靠后期修）&lt;/li>
&lt;li>旅行（一顿乱逛，不打卡主义）&lt;/li>
&lt;li>音乐（一顿乱听，完全依赖日推）&lt;/li>
&lt;li>coding（这个是真的菜）&lt;/li>
&lt;/ul>
&lt;p>可以通过邮箱(&lt;a class="link" href="mailto:opensource@kuludu.net" >opensource@kuludu.net&lt;/a>)联系我，但是我可能很久才看一下Orz（真的会有人想要联系我吗？）。&lt;/p>
&lt;h2 id="pgp-public-key">PGP Public Key
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-----BEGIN PGP PUBLIC KEY BLOCK-----
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mQINBGP8U+kBEAC4MuH1hr/qwP/BMx3LauvnmyKEikoN2ptEaXxlfNlGbrSKbLpZ
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hk5O3HA2+yroh3myoerBH71JwqJj1n+gjUCEI5KCFbDZcQ9NsAdplb2wAKTazOfb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9EtfgtS8QXAcwgtkbflyaAakUXWQMO13eQ5jQcnTIcGNTy8GqFNg4Ug4KFwdVpeb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6P84AWLKeAn/tGzGOOLdwRw4kzP3BwIJ+33dACnPqrSSaELiB3gen0gVC38kY5NN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SMEugpRZa+lDykH7bRtQXJw1U3Ha9mg3A/m9hhmEWnoABPruOs4XqBnoQ6bLZS5G
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n+6oh2DWd5+oeO4aFSZnXt7DHvURSdjF7G7RZetbz0lNLTfomR8PGZw1DUxH0Nc3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">r/cSMTKBPE2Chu6FyzmkLqdxRri3o+5qvBSaHCAay8Q0IaYhfCKgYaB2EC+HgR6q
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uS/g4BIvwaVJe3X6cGCe918t6qwa0+f5Gh9XaJk7uvJpWwfdPAx7j+461Ah/q+dK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fvZfdrslK9sWnBXo5M2CN9naxaaKXSZvtPNURP9u9vi4isv1mmyhyYewrZybHY+E
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uIzP4WkIlMSODqlTnYGrTiIXnJ4k8kphudt7d2LcAxY9Oy5MGqTYqkHn1xR+ym3F
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jArZt2GUzNUeb9QNV9DOLsT7DTMrcuztt+zv0Sfolzsy318UzQ3IOVR6iQARAQAB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tB5LdWx1ZHUgPG9wZW5zb3VyY2VAa3VsdWR1Lm5ldD6JAlEEEwEIADsWIQQAotmv
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">H7vwZr2kfGoztEyRMx6wlAUCY/xT6QIbAwULCQgHAgIiAgYVCgkICwIEFgIDAQIe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">BwIXgAAKCRAztEyRMx6wlAh2D/4rHWI3XHbTWgyPqMK6xu8ij/SRdCjOhLIoJUFj
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">h+8bSqcbrqJP+oo3/Dt1ojpwj+vamY3tNCwZPITsn6aa5z2fhSFs8uIym+M3Jb5E
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RCSZ5IlJF5CEXANPbDKMJOTxupqzP05PrR2UbJzqwoSwThSg9ovxcpY4lNnGtZCa
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rH48UrckiOmu4ir1S6aSInLKmPIqycvFmG4w3c03ND1SNy2JZura6a5fE+Gyq9Ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7kRg7mSfO0vVt35Th34kldLXDaHLosE72P46h8UttD1K2c2WS84h3IIzz3K2gLQe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">266oaKs1pnDj644VCyjB+Hh6i+PbQpHZW3mB43TP3SwZu+PvZrfYJffdxYVJIcEs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0/8KF1uFOD3QLqA+ummvjuZp5dNCz2FpzdLsYJk9H1h6g26yVc8uB7rV0WKhreq0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">KMJaaioZbgFG6rXlv7EZwOX5uiHOwRlVbXPmRF3GGF3FZRObZoT/oLV7i5i0m9G3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qt6RZyAZ5CJaG3AtKavRhr+RXhJ92rTV3Am8n+hna6Y1jqu3lOkMQewQTCnkAdBT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4wwZ3oz/ds49IEb7dURXzMpzH2tulYSxacjUsMJJqR6Y7dr6VoLs9Y4NEenkIAcy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/8PGg+XUoEImQ3sOkXK/GDFu34GFiShwqgCpoq/3IscDjBSCoyQL4khURzkMoHqy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NnPKu7kCDQRj/FPpARAAuq++kaLWqCrL8569QtWdzymPPI+OWFt6WSolnxMxpAat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">BKBR14Y0krKE1WMZxhTnp7PEl6kDyS+xbc8q8OGBPKtBQdRi29RUFDp4MGekkEib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5y2jidRYi3rS5dxk4fPwoNvklJ4sHwegr3RvNwra9XYZG4AKi3xZ5LipbelaqNDB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">plgo+2AWqLxFBmHt/EMhOxSrsYHL1FBNgTjWWN8kua4HPXAJTFAwqxdHQljLTeUY
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">BkJtMPrkHy9s36ofxyhdhGnd0ELy74hVo3M4AHY2AjnIxnriTw1IiR/mhacC0eGZ
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fI/yGgtdI8oLhk4MTWM395c0K88pVSKlGzBABVIer4VokWiseLzvnCQ3eZoctFHj
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/JCrNA5/RjP1XM20JBm9RTkmAWOtRE8fBrwoevMlwkTiZ6Au8AAUsiEncbeytsEq
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">evq95XhFeXQNQGYydG2V5nalqPR0NKDb7pYJGWBAnDVuN5KuNJGWEjJ/MdL2VLh7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">C8fPSo0aXbmxfGOQvl/hfnrceJvvpOYtzLXacQ6R+vQi4+zs3o/Ue9XXo/r18BO5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">VO66zUwhroPF16JiT0bUaSatLMzS4WM8Wt7b3DVdJy7yqveyUAslYVK8UeAcnhW0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nNIJzacc6Cn7jp/VYipFZomeZQe1Qp0C1DY+3rot7WBAv3byoPaBLSVJ+zN2utUA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EQEAAYkCNgQYAQgAIBYhBACi2a8fu/BmvaR8ajO0TJEzHrCUBQJj/FPpAhsMAAoJ
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EDO0TJEzHrCU88QQAKoB7X08gfsYJYV49VcISi/o8YgNdi9yb7zaa75kdtJ/fuvq
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">KPR7WGskaLFknpOdVr/rKmc73LVXYgC39cJe0cZbyXeSUNxi+mrPnGEhqedooyPG
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/U9rasPWu8GXcjVAJ78T1hxVcBa1JyMs0knVF6+BrM7xjisL0+Lly9txE/J1oH1Y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">r4E61/SXRODOFRNj85UgjNt9tdhUalW42gqL9Tv7k2Lftaq6jyyLouWqyn3bjmZH
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">V4lPPRpIZcp9pQ+AEhRA0VYsfua411rp7oT1VKipCaYpOMSJX5p4KOoqn1GxosiZ
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">BTfiRZJCd8Z3k0A6COOJDdkF0qurmsD3k611QhTtiEoQErJZonOdxMVL68cRe3yL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">M2yAQl30MJ9ADp+7iB/B2ZpiaJblhcxxoj4n9i60bwmyxgrNCunAWcXwOPLsdSOd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">x+5tLgiZnZbsXYpUOc3w23c59fjEDvpGN88A5kKkWhYWBtQB5mXaxA+3NKDaIKn4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cgq28M/6oii0QI5c+I7WUM7ZdTKPCFwfqZ3nbQH9ZYoKoVFxe9CWF3MolYlQ39ab
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">JpoL//OqtUA8JKgq3Z6csKHkITEBEO8HHWYqTVW9E0QpW3TN6lqRnL1mEOhM23hf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dqF4D1Do1Cy1YNuF8GGMqQlVXUGbWLGndX1PmzVNwe70fX/9cOqMfkKLTW5A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=qfeH
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----END PGP PUBLIC KEY BLOCK-----
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>文章归档</title><link>https://blog.kuludu.net/page/archives/</link><pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.kuludu.net/page/archives/</guid><description/></item><item><title>你好！新博客</title><link>https://blog.kuludu.net/article/hello-new-blog/</link><pubDate>Sat, 15 Jun 2024 19:45:00 +0800</pubDate><guid>https://blog.kuludu.net/article/hello-new-blog/</guid><description>&lt;p>突然换了一个新的博客发布方式。&lt;/p>
&lt;p>其实主要原因还是原来的博客服务器现在已经运行太多的服务从而不堪重负，apache时不时被OOM Kill导致博客也时不时跟着崩溃。&lt;/p>
&lt;p>加之原博客个人感觉更像一个笔记本，其记录的草稿一般的内容一直是我想改进的（虽然我的写作能力仍然不行）。&lt;/p>
&lt;p>所以，不如做一个fresh start，从一个新博客重新开始。&lt;/p>
&lt;p>新的博客是一个静态博客，采用hugo作为生成器。然而目前我对这个新玩意还很不熟悉，估计也需要很长一段时间才能适应吧～&lt;/p>
&lt;p>当然，原来的博客上仍然有不少有价值的文章，我会在后续的review过程中迁移过来，同时也希望能够改进文章质量，老博客已经迁移到了&lt;a class="link" href="https://old-blog.kuludu.net/" target="_blank" rel="noopener"
>https://old-blog.kuludu.net/&lt;/a>。&lt;/p>
&lt;p>Anyway, that is a new start.&lt;/p></description></item><item><title>多网口环境下配置Ubuntu网络路由</title><link>https://blog.kuludu.net/article/%E5%A4%9A%E7%BD%91%E5%8F%A3%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AEubuntu%E7%BD%91%E7%BB%9C%E8%B7%AF%E7%94%B1/</link><pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate><guid>https://blog.kuludu.net/article/%E5%A4%9A%E7%BD%91%E5%8F%A3%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AEubuntu%E7%BD%91%E7%BB%9C%E8%B7%AF%E7%94%B1/</guid><description>&lt;p>目前我们的实验室有两条线路：&lt;/p>
&lt;ul>
&lt;li>172.C.D.0/24: 校园网（不可连接互联网，但可以接入VPN）&lt;/li>
&lt;li>192.168.B.0/24: 实验室宽带网（可以连接互联网，但是没有公网IP）&lt;/li>
&lt;/ul>
&lt;p>我们的主要需求是通过校园网实现远程SSH接入，通过实验室宽带网访问互联网。但是由于Ubuntu生成的默认网关会自动将所有流量转到metric小的接口上，这将导致原本应该从校园网出口流出的SSH流量也走了实验室宽带网，从而无法建立SSH连接。这就需要对路由进行修改，可以通过netplan工具进行。&lt;/p>
&lt;p>由于校园网的路由已经建立且正确，所以在默认网络配置下的主要问题其实是&lt;strong>主机内路由表能否正确找到到客户端的路由路径&lt;/strong>，而且由于VPN的存在，&lt;strong>还需要考虑其产生的虚拟IP到主机的路由&lt;/strong>。&lt;/p>
&lt;p>编辑&lt;code>/etc/netplan/50-cloud-init.yaml&lt;/code>（这是Ubuntu 24.04默认的网络配置文件，也有可能会变动），将路由项写入：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">network:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ethernets:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> eno1:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addresses:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 172.C.D.E/24 # 主机校园网IP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> routes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - to: 172.A.0.0/12 # 整个校园网的子网
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> via: 172.C.D.1 # 当前网关（下同）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - to: 211.64.0.0/13 # VPN的虚拟IP子网
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> via: 172.C.D.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> eno2:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dhcp4: true # 实验室宽带网（直接使用DHCP配置）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来使用netplan apply进行应用，就可以实现两条线路分工工作了。&lt;/p>
&lt;p>当然，实现上述目标还有其它方法（例如通过设置路由表使流量强制走来时的接口），但是这些做法稍显复杂，就不在此赘述了。&lt;/p></description></item><item><title>从LightHouse到CVM</title><link>https://blog.kuludu.net/article/%E4%BB%8Elighthouse%E5%88%B0cvm/</link><pubDate>Wed, 20 Dec 2023 13:13:52 +0800</pubDate><guid>https://blog.kuludu.net/article/%E4%BB%8Elighthouse%E5%88%B0cvm/</guid><description>&lt;p>好久没有更新博客了，趁着迁移服务器的劲头顺便记录一下。&lt;/p>
&lt;h2 id="为什么要迁移">为什么要迁移？
&lt;/h2>&lt;p>其实目前这台博客服务器上同时运行着多个服务：&lt;/p>
&lt;ul>
&lt;li>Typecho（也就是本博客）&lt;/li>
&lt;li>kodbox网盘&lt;/li>
&lt;li>HackJNDoor&lt;a class="link" href="https://github.com/Kuludu/HackJNDoor" target="_blank" rel="noopener"
>（https://github.com/Kuludu/HackJNDoor）&lt;/a>&lt;/li>
&lt;li>frp（几乎不使用）&lt;/li>
&lt;/ul>
&lt;p>然而，源站是我三年前在腾讯云的某个活动购买的LightHouse主机（三年期），只有6M的出口带宽实在是满足不了平时网盘的日常使用（这个情况随着数据的增加愈发显著🤷），再加之主机即将过期，所以就有了迁移的念头。&lt;/p>
&lt;h2 id="往哪儿迁移">往哪儿迁移？
&lt;/h2>&lt;p>因为有备案的原因，所以我优先考虑腾讯云（这也算是被绑定了吧）。那么基本上就只剩下了继续购买LightHouse或者转CVM两个选择。&lt;/p>
&lt;p>腾讯云的LightHouse采取的是捆绑销售的模式，2U2G的典型带宽基本围绕在4M左右，这甚至还不如我这个活动机&amp;hellip;再者我运行的服务主要是流量突发，大多数时候只需要瞬时高带宽，按照带宽计费实在是浪费。&lt;/p>
&lt;p>于是我把目光转向了CVM。&lt;/p>
&lt;p>说句老实话，我对CVM的印象还停留在好几年前，对通货膨胀后CVM的价格更是已经完全没了概念（对于穷苦研究生来说好贵呀😓）。&lt;/p>
&lt;p>但是吧，对于我这种业务量其实用星星海服务器（SA2系列）中最低配置的话，总体成本还是要低于LightHouse的，加上我对硬盘读写也完全没有要求，不用SSD又可以省一大笔。同时切换流量计费，用100M的带宽只要¥0.8/G，这对我月均用不到3个G的个人开发者就非常友好了（当然我实际上没有设置这么高，因为用不到🤷）。&lt;/p>
&lt;p>嗯，南京区最近又在搞活动，我的物理位置离南京也挺近的，就它了。&lt;/p>
&lt;h2 id="怎样迁移">怎样迁移？
&lt;/h2>&lt;p>首先，由于CentOS即将停止维护，老主机的系统得换掉了&amp;hellip;因为科研工作的缘故我近年来用Ubuntu用的相对较多，所以这次决定加入Debian系列发行版的阵营。缺点就是无法按文件迁移，而且好多软件需要重新部署。&lt;/p>
&lt;p>不过好在我的业务并不复杂，直接打包整个网页程序就好了，就是从广州LightHouse到南京CVM没有内网（云联网要收费），用6M的小水管通过SFTP传文件很漫长。&lt;/p>
&lt;p>借着这个机会，我也对Apache的VirtualHost逻辑进行了重写，我才发现几年前写的转发策略有很大的问题🤦&amp;hellip;&amp;hellip;&lt;/p>
&lt;p>在部署网盘的时候我有留意一下后台负载，发现有时候在长时间不访问后突然使用CPU负载会飙到非常高的程度，猜测这与某些缓存策略有关。不过大部分时间整体负载都不高。从我目前的工作流来说，也不太可能出现大规模文件读写的场景，所以目前的迁移算是okay的。&lt;/p>
&lt;p>配置好一切，切换DNS平滑过渡👏。&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>总的来说，目前迁移的体验还是很好的，也希望未来一个多月的过渡期没有什么岔子吧。&lt;/p>
&lt;p>本文写的比较意识流，但是还是希望对和我一样近期有服务器迁移打算的个人开发者有帮助。（我这博客估计也没人看🤷）&lt;/p></description></item><item><title>关于文献导入EndNote20字段默认不支持的问题</title><link>https://blog.kuludu.net/article/%E5%85%B3%E4%BA%8E%E6%96%87%E7%8C%AE%E5%AF%BC%E5%85%A5endnote20%E5%AD%97%E6%AE%B5%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 21 Aug 2023 14:41:30 +0800</pubDate><guid>https://blog.kuludu.net/article/%E5%85%B3%E4%BA%8E%E6%96%87%E7%8C%AE%E5%AF%BC%E5%85%A5endnote20%E5%AD%97%E6%AE%B5%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>&lt;p>在Google Scholar或者其它数据库向EndNote20中导入引文的时候，有时候会发现其字段不受支持。如在默认设置中，&lt;code>Journal Article&lt;/code>就没有&lt;code>Publisher&lt;/code>这一个字段，虽然大多数论文引用格式并不要求写出出版商，但是对于某一些缺失的字段无法被添加还是会造成一些麻烦的。本文就文献导入到引用导出全流程介绍EndNote20自定义字段设置问题。&lt;/p>
&lt;h2 id="在设置中修改reference-types引用类型">在设置中修改Reference Types（引用类型）
&lt;/h2>&lt;p>首先，我们需要在&lt;code>Settings &amp;gt; Reference Types&lt;/code>中修改默认的引用类型。在这里的修改是针对某一文章类型来的，这里根据需要可以修改两个常用类型&lt;code>Journal Article（期刊文章）&lt;/code>和&lt;code>Conference Proceedings（会议出版物）&lt;/code>（下同）。&lt;/p>
&lt;p>以&lt;code>Journal Article（期刊文章）&lt;/code>为例，可以看到，&lt;code>Publisher&lt;/code>字段其实是受支持的，不过在EndNote20中被默认隐藏了。将留空的&lt;code>Publisher&lt;/code>字段重新填充上去即可启用该字段。&lt;/p>
&lt;p>&lt;img src="https://blog.kuludu.net/article/%E5%85%B3%E4%BA%8E%E6%96%87%E7%8C%AE%E5%AF%BC%E5%85%A5endnote20%E5%AD%97%E6%AE%B5%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E9%97%AE%E9%A2%98/pics/3279012832.png"
width="1086"
height="1294"
srcset="https://blog.kuludu.net/article/%E5%85%B3%E4%BA%8E%E6%96%87%E7%8C%AE%E5%AF%BC%E5%85%A5endnote20%E5%AD%97%E6%AE%B5%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E9%97%AE%E9%A2%98/pics/3279012832_hu_392649173bacb366.png 480w, https://blog.kuludu.net/article/%E5%85%B3%E4%BA%8E%E6%96%87%E7%8C%AE%E5%AF%BC%E5%85%A5endnote20%E5%AD%97%E6%AE%B5%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E9%97%AE%E9%A2%98/pics/3279012832_hu_f56f8c5335d930a7.png 1024w"
loading="lazy"
alt="Modify ref"
class="gallery-image"
data-flex-grow="83"
data-flex-basis="201px"
>&lt;/p>
&lt;p>如果有其它自定义字段，可以使用&lt;code>Custom 1 ~ 8&lt;/code>八个栏位，将需要的字段名称填入即可。&lt;/p>
&lt;p>至此，我们可以在文献选项卡中看到新的字段了。&lt;/p>
&lt;h2 id="修改默认的import-filters导入过滤器">修改默认的Import Filters（导入过滤器）
&lt;/h2>&lt;p>既然EndNote20默认关闭了&lt;code>Publisher&lt;/code>字段，那么导入过滤器自然也是默认忽略该字段的了，在这一步我们需要重新启用它。&lt;/p>
&lt;p>在&lt;code>Tools &amp;gt; Import Filters&lt;/code>中选择&lt;code>Open Filter Manager&lt;/code>，可以看到一个名为&lt;code>EndNote Import&lt;/code>过滤器，这便是需要修改的对象了。&lt;/p>
&lt;p>在这里可以直接点击&lt;code>Edit&lt;/code>进行修改，不过还是更推荐将默认设置复制一份后再进行操作。在macOS下Filters的路径为EndNote20安装路径下的&lt;code>Filters&lt;/code>文件夹，Windows的路径逻辑应该也相同。&lt;/p>
&lt;p>将&lt;code>%I&lt;/code>标签对应的{IGNORE}的标记修改为&lt;code>Publisher&lt;/code>即可，其它标签的含义可以搜索参考RIS文件的格式说明，自定义字段亦是如此。&lt;/p>
&lt;p>&lt;img src="https://blog.kuludu.net/article/%E5%85%B3%E4%BA%8E%E6%96%87%E7%8C%AE%E5%AF%BC%E5%85%A5endnote20%E5%AD%97%E6%AE%B5%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E9%97%AE%E9%A2%98/pics/244797325.png"
width="1624"
height="1310"
srcset="https://blog.kuludu.net/article/%E5%85%B3%E4%BA%8E%E6%96%87%E7%8C%AE%E5%AF%BC%E5%85%A5endnote20%E5%AD%97%E6%AE%B5%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E9%97%AE%E9%A2%98/pics/244797325_hu_9562685998dbcbed.png 480w, https://blog.kuludu.net/article/%E5%85%B3%E4%BA%8E%E6%96%87%E7%8C%AE%E5%AF%BC%E5%85%A5endnote20%E5%AD%97%E6%AE%B5%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E9%97%AE%E9%A2%98/pics/244797325_hu_a3c9973172794ccd.png 1024w"
loading="lazy"
alt="Endnote Import"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="297px"
>&lt;/p>
&lt;p>在导入文献的时候记得要选择新修改的过滤器。对于非RIS格式的引用，则需要修改对应的Import Filter。&lt;/p>
&lt;h2 id="修改默认的output-styles导出格式">修改默认的Output Styles（导出格式）
&lt;/h2>&lt;p>由于在我的论文写作中几乎只使用LaTeX作为排版工具，在这里我着重介绍一下Bibliography的导出。&lt;/p>
&lt;p>在&lt;code>Tools &amp;gt; Output Styles&lt;/code>中选择&lt;code>Open Style Manager&lt;/code>，修改&lt;code>BibTex Export&lt;/code>即可，同样地也推荐备份一遍默认设置。&lt;/p>
&lt;p>选择&lt;code>Bibliography&lt;/code>选项卡，将需要的字段以同样的格式添加进去即可，注意修改对应的文章类型。&lt;/p>
&lt;p>&lt;img src="https://blog.kuludu.net/article/%E5%85%B3%E4%BA%8E%E6%96%87%E7%8C%AE%E5%AF%BC%E5%85%A5endnote20%E5%AD%97%E6%AE%B5%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E9%97%AE%E9%A2%98/pics/428477272.png"
width="1824"
height="1300"
srcset="https://blog.kuludu.net/article/%E5%85%B3%E4%BA%8E%E6%96%87%E7%8C%AE%E5%AF%BC%E5%85%A5endnote20%E5%AD%97%E6%AE%B5%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E9%97%AE%E9%A2%98/pics/428477272_hu_58f8ff5445f394ed.png 480w, https://blog.kuludu.net/article/%E5%85%B3%E4%BA%8E%E6%96%87%E7%8C%AE%E5%AF%BC%E5%85%A5endnote20%E5%AD%97%E6%AE%B5%E9%BB%98%E8%AE%A4%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E9%97%AE%E9%A2%98/pics/428477272_hu_3e4d702eb1829e88.png 1024w"
loading="lazy"
alt="Bibliography Export"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="336px"
>&lt;/p>
&lt;p>同样地，若是需要修改纯文本的导出格式，可以修改&lt;code>Citations&lt;/code>选项卡下的内容，读者可以搜索相关资料。&lt;/p>
&lt;p>至此，EndNote20已经可以完美地收录和导出所需的字段了。&lt;/p></description></item><item><title>记在Ubuntu 22.04 LTS上部署PyTorch深度学习环境</title><link>https://blog.kuludu.net/article/%E8%AE%B0%E5%9C%A8ubuntu-22-04-lts%E4%B8%8A%E9%83%A8%E7%BD%B2pytorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/</link><pubDate>Mon, 20 Feb 2023 12:48:10 +0800</pubDate><guid>https://blog.kuludu.net/article/%E8%AE%B0%E5%9C%A8ubuntu-22-04-lts%E4%B8%8A%E9%83%A8%E7%BD%B2pytorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/</guid><description>&lt;p>最近的工作需要使用深度学习技术，也就免不了使用GPU，然而目前我实验室的机器上使用的是Windows 11的操作系统，用来进行实验确不符合我一个常年不用Windows系统的人的习惯😓，于是我买来一块移动硬盘并在这之上部署了基于Ubuntu 22.04 LTS的PyTorch的深度学习环境。起初我以为会一切顺利，可万万没想到重装一时爽，配环境火葬场&amp;hellip;本文谨记录在这中踩的坑。&lt;/p>
&lt;h2 id="关于移动硬盘外挂操作系统">关于移动硬盘外挂操作系统
&lt;/h2>&lt;p>就目前来说，我的建议是：&lt;strong>不要这么做，至少不要使用机械硬盘。&lt;/strong>&lt;/p>
&lt;p>我手上这块是WD Element的机械移动硬盘，简单测试了一下顺序读写速度，分别为：5.7GB/S和128MB/S。看着还不错，可一旦到了随机读写任务上速度与延迟就一言难尽了。直观的感受就是一个字——&lt;strong>卡&lt;/strong>，但是主要体现在读盘冷启动的时候（毕竟实验室机器的配置还是不错的）。&lt;/p>
&lt;h2 id="关于nvidia驱动问题">关于NVIDIA驱动问题
&lt;/h2>&lt;p>说句实话，我之前从未在Linux上配置过深度学习环境，用的往往是配置好了的现成品，这一次我多多少少理解为什么大家都在说Linux上的NVIDIA驱动很难用了&amp;hellip;事实上为了处理驱动问题，我从下午13时一直干到了下午17时（其实主要受磁盘IO速度与实验室网络环境影响）。&lt;/p>
&lt;p>在安装Ubuntu系统的时候，安装程序有询问是否要安装附加驱动（Additional Drivers），我自然是勾选了确定。进入系统，在miniconda虚环境下安装PyTorch，始终无法安装对应GPU版本（CUDA）。检查发现自动安装的驱动并不是最新的（应该是510版本），本能地以为升级驱动就可以了，没想到这只是噩梦的开始。&lt;/p>
&lt;p>事实上，安装驱动的方法并不只有一种，至少我找到的方法就有三种：&lt;/p>
&lt;ul>
&lt;li>从NVIDIA官网下载。&lt;/li>
&lt;li>使用&lt;code>ubuntu-drivers autoinstall&lt;/code>安装。&lt;/li>
&lt;li>使用系统应用&lt;code>Additional Drivers&lt;/code>安装。（事实证明，这是最好的方法）&lt;/li>
&lt;/ul>
&lt;h3 id="试试安装从nvidia官网下载的驱动">试试安装从NVIDIA官网下载的驱动
&lt;/h3>&lt;p>其实早在安装系统前，我已经提前在NVIDIA官网下好了对应的驱动程序，但是执行后发现至少有两个问题：&lt;/p>
&lt;ol>
&lt;li>安装驱动程序需要停止一切占用GPU的进程，其中就包含Ubuntu自带的桌面环境GNOME。这一点可以通过使用Nouveau驱动解决。&lt;/li>
&lt;li>驱动安装程序提示建议使用Ubuntu发行版渠道下载驱动，因官网驱动并不是最兼容最优化版本。&lt;/li>
&lt;/ol>
&lt;h3 id="那就用ubuntu-drivers-autoinstall安装驱动吧">那就用&lt;code>ubuntu-drivers autoinstall&lt;/code>安装驱动吧
&lt;/h3>&lt;p>按理来说，从这里安装应该是稳妥的，但是不知道是否是因为bug的原因，安装的驱动一直报错。最后无奈只能使用&lt;code>apt purge&lt;/code>清除掉所有的相关软件包了。&lt;/p>
&lt;h3 id="最后还是使用系统应用additional-drivers安装驱动吧">最后还是使用系统应用&lt;code>Additional Drivers&lt;/code>安装驱动吧
&lt;/h3>&lt;p>最开始其实我也是从这里安装的驱动，然而受到了一篇教程的&lt;del>蛊惑&lt;/del>，最后放弃了这一步。回过头来才发觉，当初就应该使用这一方法。当然这之中也遇到了一个问题，那就是开源驱动(open kernel)驱动的问题——一开始我使用的是525版本的开源驱动，事实上这也是上一步中&lt;code>ubuntu-drivers&lt;/code>推荐我安装的。然而在两次清洁安装后，显示的错误是一致的，均是无法找到设备。随后我开始怀疑是不是开源驱动的问题，遂安装525版本的非开源版本，问题解决。&lt;/p>
&lt;p>驱动问题解决了，使用&lt;code>conda install&lt;/code>，成功一键部署PyTorch的GPU版本。&lt;/p>
&lt;h2 id="关于xrdp远程桌面">关于XRDP远程桌面
&lt;/h2>&lt;p>由于实验室网络登录方式是Web Portal，所以有一个图形化界面还是更加方便一些。在按照教程配置好后，连接的结果却是黑屏和闪退。按照我搜索到的资料，大多数的资料指向向&lt;code>/etc/xrdp/startwm.sh&lt;/code>中添加以下字段:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">unset&lt;/span> DBUS_SESSION_BUS_ADDRESS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">unset&lt;/span> XDG_RUNTIME_DIR
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实际上，完全配置XRDP还需要向&lt;code>xsessionrc&lt;/code>中添加桌面程序（比如Ubuntu自带的GNOME）。而我最后的解决方案还是通过查看XRDP的错误日志，安装&lt;code>dbus-lauch&lt;/code>这一缺失的软件包解决的。&lt;/p>
&lt;hr>
&lt;p>总结：&lt;/p>
&lt;ol>
&lt;li>不要使用移动硬盘安装操作系统，至少不要使用机械硬盘。&lt;/li>
&lt;li>尽量参考外文官网资料，因其往往更新更详尽。&lt;/li>
&lt;li>检查程序日志而不是搜索症状。&lt;/li>
&lt;/ol></description></item><item><title>联邦学习中的non-IID数据</title><link>https://blog.kuludu.net/article/%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84non-iid%E6%95%B0%E6%8D%AE/</link><pubDate>Fri, 23 Sep 2022 14:07:00 +0800</pubDate><guid>https://blog.kuludu.net/article/%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84non-iid%E6%95%B0%E6%8D%AE/</guid><description>&lt;h2 id="关于non-iid数据">关于non-IID数据
&lt;/h2>&lt;p>&lt;strong>independent and identically distributed(IID)&lt;strong>即&lt;/strong>独立同分布&lt;/strong>，指的是全体样本服从某一分布，而每次获得的样本都是独立地从这个分布上采样获得的。&lt;/p>
&lt;p>&lt;code>独立&lt;/code>：指的是每次采样之间不会有关系。例如多次投骰子，第一次投和第十次投之间没有什么关系；相较之下，出现乌云与下雨就非独立。&lt;/p>
&lt;p>&lt;code>同分布&lt;/code>：指的是随机变量服从统一分布。仍以骰子举例，若骰子质量分布不会变动，则每次投的结果将会呈现一定的规律；相较之下若采用作弊骰子（可以人为改变某一端的质量），则会破坏这一性质。&lt;/p>
&lt;p>&lt;strong>non-IID&lt;/strong>自然是以上概念的否命题（独立和同分布任意不满足即可）。&lt;/p>
&lt;h2 id="联邦学习中的non-iid数据分类">联邦学习中的non-IID数据分类
&lt;/h2>&lt;p>在真实世界中数据往往会因为各种各样的原因而呈现non-IID的特性（例如某地雨水天气多，生锈故障的样本会更多）。在机器学习领域，我们不妨从输入空间$X$与输出空间$Y$来考虑。&lt;/p>
&lt;h3 id="假设样本独立但不同分布">假设样本独立但不同分布
&lt;/h3>&lt;p>样本满足贝叶斯公式：$P(X,Y)=P(X)P(Y|X)$。对于客户端$i$与$j$，考虑$P_i(X)$（$i$输入分布）、$P_i(Y|X)$（$i$标签分布）与$P_j(X)$（$j$输入分布）、$P_j(Y|X)$（$j$输入分布）。&lt;/p>
&lt;ol>
&lt;li>若$P_i(X)\ne P_j(X)$，且$P_i(Y|X)=P_j(Y|X)$：客户端输入不相同，但输出相同。例如不同国家对于汽车行驶方向的规定不同，但都需要遵守相同的交通规则（跟随信号灯）。&lt;/li>
&lt;li>若$P_i(X)= P_j(X)$，且$P_i(Y|X)\ne P_j(Y|X)$：客户端输入相同，但输出不相同。例如不同地区对于交通法规的定义不同，有些地区红灯必须停止，而有些地区可以在确认安全的情况下通行。&lt;/li>
&lt;li>若$P_i(X)\ne P_j(X)$，且$P_i(Y|X)\ne P_j(Y|X)$：客户端输入输出均不相同。此为以上两种情况的组合，例如行驶方向与交通法规均不相同。&lt;/li>
&lt;/ol>
&lt;p>若$P_i(X)=P_j(X)$，且$P_i(Y|X)=P_j(Y|X)$：与假设不符（这是IID）。&lt;/p>
&lt;h3 id="假设样本不独立但同分布">假设样本不独立但同分布
&lt;/h3>&lt;p>对于全体样本而言考虑$X\sim B(n,p)$，那么若有$Y=(n-X)\sim B(n,p)$则输入与输出不独立但同分布。例如抛$n$次硬币$x$次正面朝上的概率与$n-x$次反面朝上的概率。&lt;/p>
&lt;p>放在联邦学习的角度，可以理解为$P_i(X)$与$P_j(X)$不独立，而$P_i(Y|X)=P_j(Y|X)$服从同一分布。例如银行中用户数据异构但用户大多一样。&lt;/p>
&lt;h3 id="假设样本不独立且不同分布">假设样本不独立且不同分布
&lt;/h3>&lt;p>比如读paper与掉头发的关系（？&lt;/p>
&lt;h2 id="再从样本特性上分类">再从样本特性上分类
&lt;/h2>&lt;h3 id="属性倾斜">属性倾斜
&lt;/h3>&lt;p>属性倾斜从客户端样本属性重叠程度出发考虑，分为：非重叠属性倾斜（Non-overlapping Attribute Skew）、部分重叠属性倾斜（Partial Overlapping Attribute Skew）与完全重叠属性倾斜（Full Overlapping Attribute Skew）。&lt;/p>
&lt;h4 id="非重叠属性倾斜">非重叠属性倾斜
&lt;/h4>&lt;p>客户端的属性完全没有重叠（例如$k_1$拥有属性$A,B$，$k_2$拥有属性$C,D$），但展现强相关性，此时可以视为纵向联邦学习（Vertical FL）。&lt;/p>
&lt;h4 id="部分重叠属性倾斜">部分重叠属性倾斜
&lt;/h4>&lt;p>客户端的属性部分重叠（例如$k_1$拥有属性$A,B$，$k_2$拥有属性$B,D$）。&lt;/p>
&lt;h4 id="完全重叠属性倾斜">完全重叠属性倾斜
&lt;/h4>&lt;p>客户端的属性部分重叠（例如$k_1$拥有属性$A,B$，$k_2$也拥有属性$A,B$）。&lt;/p>
&lt;h3 id="标签倾斜">标签倾斜
&lt;/h3>&lt;h4 id="标签分布倾斜">标签分布倾斜
&lt;/h4>&lt;h4 id="标签偏好倾斜">标签偏好倾斜
&lt;/h4>&lt;p>客户端对样本的偏好不同（对于同一样本，客户端$A$喜欢，$B$不喜欢）。&lt;/p>
&lt;h3 id="时间倾斜">时间倾斜
&lt;/h3>&lt;p>随着时间的推移，客户端的数据会有所倾斜（可参考联邦增量学习）。&lt;/p>
&lt;h3 id="其它">其它
&lt;/h3>&lt;h4 id="属性标签倾斜">属性&amp;amp;标签倾斜
&lt;/h4>&lt;h4 id="质量倾斜">质量倾斜
&lt;/h4>&lt;hr>
&lt;h2 id="ref">Ref
&lt;/h2>&lt;ul>
&lt;li>Non-IID data and Continual Learning processes in Federated Learning: A long road ahead&lt;/li>
&lt;li>Federated Learning on Non-IID Data: A Survey&lt;/li>
&lt;li>Federated Visual Classification with Real-World Data Distribution&lt;/li>
&lt;li>《机器学习》 - 周志华著&lt;/li>
&lt;/ul></description></item><item><title>lower_bound()的一个未预期的执行行为</title><link>https://blog.kuludu.net/article/lower_bound%E7%9A%84%E4%B8%80%E4%B8%AA%E6%9C%AA%E9%A2%84%E6%9C%9F%E7%9A%84%E6%89%A7%E8%A1%8C%E8%A1%8C%E4%B8%BA/</link><pubDate>Tue, 15 Jun 2021 15:36:00 +0800</pubDate><guid>https://blog.kuludu.net/article/lower_bound%E7%9A%84%E4%B8%80%E4%B8%AA%E6%9C%AA%E9%A2%84%E6%9C%9F%E7%9A%84%E6%89%A7%E8%A1%8C%E8%A1%8C%E4%B8%BA/</guid><description>&lt;p>前一阵，后辈问了我一个问题：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lower_bound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">greater&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为什么这段代码为什么执行结果为0？&lt;/p>
&lt;p>确实，从直观思考上来说，返回结果确实有些诡异。一时间我也不太理解。&lt;/p>
&lt;p>我的第一反应是比较 &lt;code>p&lt;/code>与 &lt;code>a.end()&lt;/code>的位置关系，发现 &lt;code>p=a.end()&lt;/code>。也就是说，&lt;strong>函数并没有在容器中找到比a大的元素&lt;/strong>，这并不符合预期的执行结果。&lt;/p>
&lt;p>遇事不决翻文档，于是我找到了&lt;a class="link" href="https://zh.cppreference.com/w/cpp/algorithm/upper_bound" target="_blank" rel="noopener"
>这篇文章&lt;/a>。其中详细介绍了 &lt;code>upper_bound&lt;/code>函数的原型与定义，其中介绍中的这句话解决了这个问题：&lt;/p>
&lt;blockquote>
&lt;p>范围 &lt;code>[first, last)&lt;/code> 必须已相对于表达式 !(value &amp;lt; element) 或 !comp(value, element) 划分，即所有令此表达式为 true 的元素必须前趋所有令此表达式为 false 的元素。完全排序的范围满足此判别标准。&lt;/p>&lt;/blockquote>
&lt;p>除了常提到的序列有序前提以外，&lt;code>lower_bound&lt;/code>对重载的比较关系也有一定的要求，这也就导致了上例中 &lt;code>lower_bound&lt;/code>函数不符合预期的执行。&lt;/p>
&lt;p>参考其给出了函数可能的实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">ForwardIt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Compare&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ForwardIt&lt;/span> &lt;span class="n">upper_bound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ForwardIt&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ForwardIt&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Compare&lt;/span> &lt;span class="n">comp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ForwardIt&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">typename&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">iterator_traits&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ForwardIt&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">difference_type&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">distance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">last&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">it&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">step&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">advance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">comp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">step&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">step&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也对应了介绍中的说法，当采用上例的函数模版重载大小关系，会使迭代器 &lt;code>it&lt;/code>不断向后迭代，直至与 &lt;code>a.end()&lt;/code>重合。&lt;/p>
&lt;p>所以，要使运行结果正确，可以对函数传递 &lt;code>a&lt;/code>的反向迭代器 &lt;code>a.rbegin()&lt;/code>与 &lt;code>a.rend()&lt;/code>。即：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lower_bound&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rbegin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rend&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">greater&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者使用 &lt;code>reverse&lt;/code>函数先对序列进行反转，当然，这样会造成性能损失。&lt;/p></description></item><item><title>MacOS下卸载System Extensions</title><link>https://blog.kuludu.net/article/macos%E4%B8%8B%E5%8D%B8%E8%BD%BDsystem-extensions/</link><pubDate>Sat, 29 May 2021 15:29:00 +0800</pubDate><guid>https://blog.kuludu.net/article/macos%E4%B8%8B%E5%8D%B8%E8%BD%BDsystem-extensions/</guid><description>&lt;p>System Extensions是macOS的一套系统拓展机制，从macOS Catalina开始出现，具体可以参考Apple Developer的&lt;a class="link" href="https://developer.apple.com/system-extensions/" target="_blank" rel="noopener"
>这篇介绍&lt;/a>。&lt;/p>
&lt;p>一般情况下，用户并不需要手动维护系统拓展。在拓展安装与应用卸载的过程中系统会自动检查并执行相关操作。&lt;/p>
&lt;p>然而，既然有了本文就说明有那么一个问题。&lt;/p>
&lt;p>&lt;strong>What if an application fail to uninstall its own system extension?&lt;/strong>&lt;/p>
&lt;p>这个问题发生在我正想卸载我的安全软件Avast Security上。&lt;/p>
&lt;p>在执行卸载操作的时候，程序提示&lt;code>fail to uninstall&lt;/code>。&lt;/p>
&lt;p>首先列出我的软件信息：macOS Big Sur 11.3.1、Avast Security（发文前最新版本）。&lt;/p>
&lt;p>系统洁癖症如我，自然不指望厂商修复了，还是手动卸载吧。&lt;/p>
&lt;p>搜索相关资料，得知macOS可以通过&lt;code>systemextensionsctl&lt;/code>这个命令管理系统拓展。&lt;/p>
&lt;p>于是系统提示如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">At this time, this tool cannot be used if System Integrity Protection is enabled.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">This limitation will be removed in the near future.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Please remember to re-enable System Integrity Protection!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>没错，就是不能卸载！&lt;/p>
&lt;p>原因就是系统集成保护（SIP）的锅。有了这个机制甚至root用户也不能修改与系统及系统拓展相关的文件（也就是说root用户也没法手动关闭系统拓展）。&lt;/p>
&lt;p>坑啊！&lt;/p>
&lt;p>解决方案其实也很明了，使用&lt;code>command + R&lt;/code>进入System Recovery模式，通过&lt;code>csrutil&lt;/code>命令关闭这令人又爱又恨的SIP，再正常启动卸载系统拓展就行（执行过程中有种裸奔的感觉😓）。&lt;/p>
&lt;p>&lt;strong>卸载完成后别忘了用同样的方法开启SIP！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>卸载完成后别忘了用同样的方法开启SIP！&lt;/strong>&lt;/p>
&lt;p>&lt;strong>卸载完成后别忘了用同样的方法开启SIP！&lt;/strong>&lt;/p>
&lt;p>重要的事情说三遍，毕竟SIP还是一个非常优秀的系统保护机制的。&lt;/p>
&lt;hr>
&lt;p>（希望Apple有关解除限制的承诺能尽快兑现。&lt;/p></description></item><item><title>HOG</title><link>https://blog.kuludu.net/article/hog/</link><pubDate>Tue, 20 Apr 2021 17:57:00 +0800</pubDate><guid>https://blog.kuludu.net/article/hog/</guid><description>&lt;p>OG（Histogram of Oriented Gridients）即方向梯度直方图，是一种图像特征提取的方法。其最早由法国研究员Dalal等人在CVPR-2005上提出，通过图像局部梯度方向的分布描述图像中的物体边缘。&lt;/p>
&lt;p>算法主要分为以下几个步骤：&lt;/p>
&lt;ul>
&lt;li>预处理&lt;/li>
&lt;li>计算梯度&lt;/li>
&lt;li>计算梯度方向直方图&lt;/li>
&lt;li>重叠直方图归一化&lt;/li>
&lt;li>获取HOG特征向量&lt;/li>
&lt;/ul>
&lt;h2 id="预处理">预处理
&lt;/h2>&lt;p>在这一步中，可以对图像进行裁剪与缩放以及调整图像亮度，以便后续对图像处理。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;ul>
&lt;li>幂次变换&lt;/li>
&lt;li>对数变换&lt;/li>
&lt;/ul>
&lt;h2 id="计算梯度">计算梯度
&lt;/h2>&lt;p>通过Sobel算子计算水平与竖直梯度，并计算合梯度的幅值与方向：&lt;/p>
&lt;p>$$
g=\sqrt{g^2_{x}+g^2_{y}}
$$&lt;/p>
&lt;p>$$
\theta=\arctan\frac{g_y}{g_x}
$$&lt;/p>
&lt;p>因为梯度方向取绝对值，所以$\theta\in[0, \pi]$，方向相反的两个梯度会被认为是同一个。&lt;/p>
&lt;h2 id="计算梯度方向直方图">计算梯度方向直方图
&lt;/h2>&lt;p>将图像划分为$n\times m$的cell，对每个cell计算方向梯度强度直方图。在这一步中，我们需要对梯度方向进行离散化，例如可以将数据分为9个深度为20的箱，从而形成一个长度为9向量。&lt;/p>
&lt;h2 id="重叠直方图归一化">重叠直方图归一化
&lt;/h2>&lt;p>将$x\times x$的cell划分为一个block，采用滑动窗口的策略，对block内每一个cell拼接而成的向量进行归一化操作。&lt;/p>
&lt;h2 id="获取hog特征向量">获取HOG特征向量
&lt;/h2>&lt;p>在上一步中，对于每一个block，我们都得到了一个长度为$bin_{depth}\times x^2$的向量，共计$(n-1)\times(m-1)$个。将这些向量拼接起来，就得到了我们需要求的HOG特征向量&lt;/p>
&lt;hr>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/85829145" target="_blank" rel="noopener"
>https://zhuanlan.zhihu.com/p/85829145&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">cv2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">skimage&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">io&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">matplotlib.pyplot&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">plt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">skimage.feature&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">hog&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">sklearn.svm&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">SVC&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">sklearn.metrics&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">precision_score&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">recall_score&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TRAIN_COUNT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">500&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TEST_COUNT&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">get_features&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">object_detect&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">img_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;data/test_set/&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">object_detect&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">s/&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">object_detect&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.%d.jpg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4001&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">img_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;data/training_set/&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">object_detect&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">s/&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">object_detect&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.%d.jpg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">object_detect&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;cat&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">)])&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reshape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">)])&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reshape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">features&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img_path&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 读取图片&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cv2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img_path&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cv2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">IMREAD_GRAYSCALE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 尺寸缩放&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cv2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gray&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 中值滤波&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cv2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">medianBlur&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gray&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># HOG特征提取&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hog_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gray&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">orientations&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pixels_per_cell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">cells_per_block&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">features&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hog_image&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flatten&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">features&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">features&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">features&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">labels&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">get_predict_img&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img_path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cv2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">img_path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cv2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">IMREAD_GRAYSCALE&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 尺寸缩放&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cv2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gray&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">128&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 中值滤波&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cv2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">medianBlur&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gray&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">normalised_blocks&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">hog_image&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gray&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">orientations&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pixels_per_cell&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">cells_per_block&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">visualise&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">hog_image&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reshape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cat_labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_features&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">object_detect&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">TRAIN_COUNT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dog&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dog_labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_features&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">object_detect&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;dog&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">TRAIN_COUNT&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">img&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">vstack&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">cat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dog&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">vstack&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">cat_labels&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dog_labels&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hstack&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">img&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">labels&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">clf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SVC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">probability&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">[:,&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">[:,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">clf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">labels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ----------- 预测单张图片 ---------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># test_img = get_predict_img(&amp;#34;training_set/cats/cat.38.jpg&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pred = clf.predict(test_img)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># print(pred)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ----------- 预测单张图片 ---------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test_cat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_cat_labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_features&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">object_detect&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;cat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">TEST_COUNT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test_dog&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_dog_labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_features&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">object_detect&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;dog&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">TEST_COUNT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test_img&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">vstack&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">test_cat&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_dog&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test_labels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">vstack&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">test_cat_labels&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_dog_labels&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pred&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">predict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_img&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">precision&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">precision_score&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pred&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">test_labels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">recall&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">recall_score&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pred&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">test_labels&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;实际类别:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">test_labels&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flatten&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;预测类别:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">pred&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">flatten&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;精准率:&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">precision&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, 召回率:&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">recall&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>“解决”CUDNN_STATUS_ALLOC_FAILED</title><link>https://blog.kuludu.net/article/%E8%A7%A3%E5%86%B3-cudnn_status_alloc_failed/</link><pubDate>Mon, 22 Mar 2021 21:42:00 +0800</pubDate><guid>https://blog.kuludu.net/article/%E8%A7%A3%E5%86%B3-cudnn_status_alloc_failed/</guid><description>&lt;p>最近正在做一个&lt;del>炼丹&lt;/del>深度学习的项目，不可避免地使用到了GPU加速。其中，在使用cuDNN的时候遇到了CUDNN_STATUS_ALLOC_FAILED的问题，记录一下。&lt;/p>
&lt;p>首先给出我的系统硬件以及软件环境：&lt;/p>
&lt;ul>
&lt;li>OS: Windows Server 2019 Standard&lt;/li>
&lt;li>CPU: Intel Xeon W-2123 3.6GHz&lt;/li>
&lt;li>Memory: 64G ECC&lt;/li>
&lt;li>GPU: NVIDIA Quadro P4000(8G)&lt;/li>
&lt;li>Tensorflow: 1.13.2&lt;/li>
&lt;li>Keras: 2.1.5&lt;/li>
&lt;li>CUDA: 10.0&lt;/li>
&lt;li>cuDNN: 7.3&lt;/li>
&lt;/ul>
&lt;p>具体报错信息如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">2021-03-22 20:39:27.884555: E tensorflow/stream_executor/cuda/cuda_dnn.cc:334] Could not create cudnn handle: CUDNN_STATUS_ALLOC_FAILED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2021-03-22 20:39:27.888005: E tensorflow/stream_executor/cuda/cuda_dnn.cc:334] Could not create cudnn handle: CUDNN_STATUS_ALLOC_FAILED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Traceback (most recent call last):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> File &amp;#34;C:\ProgramData\Anaconda3\envs\ly\lib\site-packages\tensorflow\python\client\session.py&amp;#34;, line 1334, in _do_call
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return fn(*args)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> File &amp;#34;C:\ProgramData\Anaconda3\envs\ly\lib\site-packages\tensorflow\python\client\session.py&amp;#34;, line 1319, in _run_fn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> options, feed_dict, fetch_list, target_list, run_metadata)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> File &amp;#34;C:\ProgramData\Anaconda3\envs\ly\lib\site-packages\tensorflow\python\client\session.py&amp;#34;, line 1407, in _call_tf_sessionrun
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run_metadata)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tensorflow.python.framework.errors_impl.UnknownError: Failed to get convolution algorithm. This is probably because cuDNN failed to initialize, so try looking to see if a warning log message was printed above.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [[{{node conv2d_1/convolution}}]]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [[{{node concat_9}}]]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="quick-fix">Quick Fix
&lt;/h2>&lt;p>此处参考stackoverflow上的&lt;a class="link" href="https://stackoverflow.com/questions/59116872/could-not-create-cudnn-handle-cudnn-status-alloc-failed-on-a-project-that-sho" target="_blank" rel="noopener"
>一个方案&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;CUDA_VISIBLE_DEVICES&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;-1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>直接禁用GPU，自然也就不会牵扯到cuDNN。&lt;/p>
&lt;p>Problem solved, amazing!&lt;/p>
&lt;p>个鬼。&lt;/p>
&lt;p>禁用GPU也就意味着禁用了GPU加速，&lt;del>意味着可怜的CPU要burn itself&lt;/del>，这在对于效率有要求的生产环境是不行的🙅‍♂️。&lt;/p>
&lt;h2 id="观察">观察
&lt;/h2>&lt;p>在建立模型后显存直接爆炸，如下图：&lt;/p>
&lt;p>&lt;img src="https://blog.kuludu.net/article/%E8%A7%A3%E5%86%B3-cudnn_status_alloc_failed/1744973825.png"
width="389"
height="90"
srcset="https://blog.kuludu.net/article/%E8%A7%A3%E5%86%B3-cudnn_status_alloc_failed/1744973825_hu_71ea199cc7b62134.png 480w, https://blog.kuludu.net/article/%E8%A7%A3%E5%86%B3-cudnn_status_alloc_failed/1744973825_hu_525853d91d2e5337.png 1024w"
loading="lazy"
alt="AF436168-5387-4556-979B-721BE57A7A39.png"
class="gallery-image"
data-flex-grow="432"
data-flex-basis="1037px"
>&lt;/p>
&lt;p>查阅资料，初步猜测是显存不足导致的，所以想到了限制一下显存的消耗：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">tensorflow&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">tf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">keras.backend.tensorflow_backend&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">set_session&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ConfigProto&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">config&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gpu_options&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">allow_growth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">set_session&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Session&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>限制后显存明显降低了。&lt;/p>
&lt;p>&lt;img src="https://blog.kuludu.net/article/%E8%A7%A3%E5%86%B3-cudnn_status_alloc_failed/2334776544.png"
width="407"
height="84"
srcset="https://blog.kuludu.net/article/%E8%A7%A3%E5%86%B3-cudnn_status_alloc_failed/2334776544_hu_dbef2b96cb1145d8.png 480w, https://blog.kuludu.net/article/%E8%A7%A3%E5%86%B3-cudnn_status_alloc_failed/2334776544_hu_5985e633df9bf574.png 1024w"
loading="lazy"
alt="AF436168-5387-4556-979B-721BE57A7A39.png"
class="gallery-image"
data-flex-grow="484"
data-flex-basis="1162px"
>&lt;/p>
&lt;p>但是崩溃的问题依旧😓。&lt;/p>
&lt;p>又想到了一个问题，因为服务器是多个项目组共用的，&lt;strong>是不是有可能为其它组正在使用导致cuDNN无法创建句柄呢？&lt;/strong>&lt;/p>
&lt;p>有可能，但是我也不能去关别人的程序呀&lt;del>boss不得打死我&lt;/del>😅。&lt;/p>
&lt;p>疑问留在这里，等服务器空了就来补充。（&lt;del>当然可能我也压根不会填坑&lt;/del>，不如留给读者当一个思路）&lt;/p>
&lt;hr>
&lt;h2 id="reference">Reference
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/tensorflow/tensorflow/issues/39989" target="_blank" rel="noopener"
>https://github.com/tensorflow/tensorflow/issues/39989&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/qq_40635998/article/details/87297634" target="_blank" rel="noopener"
>https://blog.csdn.net/qq_40635998/article/details/87297634&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>在macOS下使用GPG对Git commit签名</title><link>https://blog.kuludu.net/article/%E5%9C%A8macos%E4%B8%8B%E4%BD%BF%E7%94%A8gpg%E5%AF%B9git-commit%E7%AD%BE%E5%90%8D/</link><pubDate>Sun, 27 Dec 2020 23:41:00 +0800</pubDate><guid>https://blog.kuludu.net/article/%E5%9C%A8macos%E4%B8%8B%E4%BD%BF%E7%94%A8gpg%E5%AF%B9git-commit%E7%AD%BE%E5%90%8D/</guid><description>&lt;p>在macOS 11.1下测试通过。&lt;/p>
&lt;ul>
&lt;li>gpg (GnuPG) 2.2.25&lt;/li>
&lt;li>libgcrypt 1.8.7&lt;/li>
&lt;li>pinentry-mac (pinentry) 0.9.4&lt;/li>
&lt;/ul>
&lt;h2 id="安装所需软件">安装所需软件
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">brew install gpg2 gnupg pinentry-mac
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="创建钥匙对">创建钥匙对
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gpg --full-generate-key
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里建议使用&lt;code>--full-generate-key&lt;/code>选项自定义全部选项，按照提示输入即可，加密方法选&lt;code>(1) RSA and RSA (default)&lt;/code>，密钥长度可选择最长&lt;code>4096&lt;/code>。&lt;/p>
&lt;p>其中邮箱地址需要与Github中验证通过的邮箱保持一致。&lt;/p>
&lt;h2 id="设置终端环境变量">设置终端环境变量
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GPG_TTY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>tty&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这一步，设置GPG终端类型环境变量，目的是让GPG程序知道使用什么作为终端，并使其生效：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc &lt;span class="c1"># 如果使用的是bash，更改为.bashrc&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="配置gpg代理">配置GPG代理
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vim ~/.gnupg/gpg-agent.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将以下内容追加进入配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pinentry-program /usr/local/bin/pinentry-mac
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样，就可以使用pinentry管理GPG密钥了。&lt;/p>
&lt;h2 id="载入gpg代理配置">载入GPG代理配置
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gpgconf --kill gpg-agent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过杀死&lt;code>gpg-agent&lt;/code>，确保配置文件被加载。&lt;/p>
&lt;h2 id="测试一下">测试一下
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> gpg --clearsign
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行以上命令，对字符串&lt;code>test&lt;/code>进行签名以测试gpg是否配置成功。&lt;/p>
&lt;p>如果配置成功，应该会出现pinentry的窗口，选择&lt;code>Save in keychain&lt;/code>可以将密码保存至钥匙链。&lt;/p>
&lt;p>正确输入密码后，可以看到信息和签名。&lt;/p>
&lt;h2 id="获取密钥id">获取密钥ID
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gpg -K --keyid-format SHORT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行成功应该会出现这样的内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sec rsa4096/&amp;lt;Key ID Short&amp;gt; 2020-12-27 [SC] [expires: 2024-12-26]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;Key ID&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uid [ultimate] example &amp;lt;example@example.com&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>Key ID Short&lt;/code>或&lt;code>Key ID&lt;/code>均可。&lt;/p>
&lt;h2 id="在git中设置密钥">在Git中设置密钥
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git config --global user.signingkey &amp;lt;Key ID&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过以上命令可以在全局设置中配置密钥ID。&lt;/p>
&lt;h2 id="开启强制签名">开启强制签名
&lt;/h2>&lt;p>通过以上步骤就可以实现GPG签名commit了，只需要添加&lt;code>-S&lt;/code>选项即可，如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git commit -S -m &lt;span class="s2">&amp;#34;这是一条签名过的commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是为了方便，我们可以通过全局设置来强制开启GPG&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git config --global commit.gpgsign &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global tag.forceSignAnnotated &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中第一个参数是默认开启签名，第二个参数是强制开启签名。&lt;/p>
&lt;hr>
&lt;h2 id="后记">后记
&lt;/h2>&lt;p>在最初的配置过程完成后，我对我的一个仓库进行commit操作出现错误，如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">error: gpg failed to sign the data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fatal: failed to write commit object
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过加入&lt;code>GIT_TRACE=1&lt;/code> 参数观察Git的执行过程，我发现其卡死在了这个命令的执行上：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gpg --status-fd&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> -bsau &amp;lt;Key ID&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>具体是什么原因我并未做深究。&lt;/p>
&lt;hr>
&lt;h2 id="参考">参考
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://help.github.com/articles/signing-commits-using-gpg/" target="_blank" rel="noopener"
>https://help.github.com/articles/signing-commits-using-gpg/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://gist.github.com/troyfontaine/18c9146295168ee9ca2b30c00bd1b41e" target="_blank" rel="noopener"
>https://gist.github.com/troyfontaine/18c9146295168ee9ca2b30c00bd1b41e&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/signing-commits" target="_blank" rel="noopener"
>https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/signing-commits&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://merikan.com/2019/05/how-to-sign-git-commits/" target="_blank" rel="noopener"
>https://merikan.com/2019/05/how-to-sign-git-commits/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>旅行足迹</title><link>https://blog.kuludu.net/page/visited/</link><pubDate>Mon, 19 Oct 2020 09:35:00 +0800</pubDate><guid>https://blog.kuludu.net/page/visited/</guid><description>&lt;h2 id="国内">国内
&lt;/h2>&lt;h3 id="湖南">湖南
&lt;/h3>&lt;ul>
&lt;li>长沙&lt;/li>
&lt;li>株洲&lt;/li>
&lt;li>湘潭&lt;/li>
&lt;li>岳阳&lt;/li>
&lt;/ul>
&lt;h3 id="江西">江西
&lt;/h3>&lt;ul>
&lt;li>宜春&lt;/li>
&lt;/ul>
&lt;h3 id="湖北">湖北
&lt;/h3>&lt;ul>
&lt;li>武汉&lt;/li>
&lt;/ul>
&lt;h3 id="江苏">江苏
&lt;/h3>&lt;ul>
&lt;li>无锡&lt;/li>
&lt;li>苏州&lt;/li>
&lt;li>南京&lt;/li>
&lt;li>镇江&lt;/li>
&lt;/ul>
&lt;h3 id="浙江">浙江
&lt;/h3>&lt;ul>
&lt;li>杭州&lt;/li>
&lt;/ul>
&lt;h3 id="云南">云南
&lt;/h3>&lt;ul>
&lt;li>昆明&lt;/li>
&lt;li>丽江&lt;/li>
&lt;/ul>
&lt;h3 id="广东">广东
&lt;/h3>&lt;ul>
&lt;li>广州&lt;/li>
&lt;li>深圳&lt;/li>
&lt;/ul>
&lt;h3 id="海南">海南
&lt;/h3>&lt;ul>
&lt;li>海口&lt;/li>
&lt;li>三亚&lt;/li>
&lt;/ul>
&lt;h3 id="福建">福建
&lt;/h3>&lt;ul>
&lt;li>厦门&lt;/li>
&lt;li>漳州&lt;/li>
&lt;li>泉州&lt;/li>
&lt;/ul>
&lt;h3 id="河北">河北
&lt;/h3>&lt;ul>
&lt;li>唐山&lt;/li>
&lt;li>秦皇岛&lt;/li>
&lt;/ul>
&lt;h3 id="山东">山东
&lt;/h3>&lt;ul>
&lt;li>青岛&lt;/li>
&lt;/ul>
&lt;h3 id="黑龙江">黑龙江
&lt;/h3>&lt;ul>
&lt;li>哈尔滨&lt;/li>
&lt;/ul>
&lt;h3 id="辽宁">辽宁
&lt;/h3>&lt;ul>
&lt;li>沈阳&lt;/li>
&lt;li>大连&lt;/li>
&lt;/ul>
&lt;h3 id="陕西">陕西
&lt;/h3>&lt;ul>
&lt;li>西安&lt;/li>
&lt;/ul>
&lt;h3 id="安徽">安徽
&lt;/h3>&lt;ul>
&lt;li>芜湖&lt;/li>
&lt;/ul>
&lt;h3 id="四川">四川
&lt;/h3>&lt;ul>
&lt;li>成都&lt;/li>
&lt;li>阿坝藏族羌族自治州&lt;/li>
&lt;/ul>
&lt;h3 id="上海">上海
&lt;/h3>&lt;h3 id="天津">天津
&lt;/h3>&lt;h3 id="北京">北京
&lt;/h3>&lt;h3 id="香港">香港
&lt;/h3>&lt;h2 id="海外">海外
&lt;/h2>&lt;h3 id="malaysia">Malaysia
&lt;/h3>&lt;ul>
&lt;li>Kuala Lumpur&lt;/li>
&lt;li>Melaka&lt;/li>
&lt;/ul>
&lt;h3 id="singapore">Singapore
&lt;/h3>&lt;h3 id="japan">Japan
&lt;/h3>&lt;ul>
&lt;li>Tokyo&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>“去过”定义为至少停留超过一天，所有“路过”的城市未统计在内。&lt;/p></description></item><item><title>搜索</title><link>https://blog.kuludu.net/page/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.kuludu.net/page/search/</guid><description/></item></channel></rss>